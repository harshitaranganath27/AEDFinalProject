/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.Appointment.Appointment;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Pharmacy.Pharmacy;
import Business.Enterprise.Pharmacy.PharmacyDirectory;
import Business.Medicine.Medicine;
import Business.Medicine.MedicineDirectory;
import Business.Network.Network;
import Business.Operation.Operation;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.Utility.Validation;
import Business.WorkQueue.DoctorWorkRequest;
import Business.WorkQueue.NurseWorkRequest;
import Business.WorkQueue.ReceptionistWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Appointment appointment;
    private Employee doctor;
    private Patient patient;
    private MedicineDirectory medicineList;
    private EcoSystem ecosystem;
   // private LabTestDirectory labTestList;
    private UserAccount receptionist;
    private Network network;
    private Medicine medicine;
    private PharmacyDirectory pharmacyList;
    private Pharmacy pharmacy;
 
    //private EcoSystem ecosystem;
    
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public DoctorWorkAreaJPanel(JPanel userProcessContainer, Organization organization, UserAccount userAccount, Enterprise enterprise, EcoSystem ecosystem) {
        initComponents();
        this.ecosystem=ecosystem;
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.network=enterprise.getNetwork();
        enterpriseLabel.setText(enterprise.getName());
        this.doctor=userAccount.getEmployee();
        populateRequestTable();
        scheduleSurgeryJPanel.setVisible(false);
        //viewPrescriptionPanel.setVisible(false);
        //appointment.setAppointmentId(Integer.parseInt(appoinmtntDTxt.getText()));
        appoinmtntDTxt.setEditable(false);
        jLabel7.setText("Welcome Dr. " + doctor.getName());
    }

    
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) DoctorWorkAreaTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            if(!((DoctorWorkRequest)request).getAppointment().getStatus().equals("Cancel")){
            Object[] row = new Object[6];
            row[0] = ((DoctorWorkRequest)request).getPatient();//request.getMessage();
            row[1] = ((DoctorWorkRequest)request).getAppointment();
            row[2] = ((DoctorWorkRequest)request).getSender();
            row[3] = ((DoctorWorkRequest)request).getAppointment().getStatus();//getReceiver();
            row[4] = ((DoctorWorkRequest)request);//getReceiver();
            row[5] = ((DoctorWorkRequest)request).getStatus();//getReceiver();
            //row[2] = request.getStatus();
//            String result = ((LabTestWorkRequest) request).getTestResult();
            //row[3] = result == null ? "Waiting" : result;
            
            model.addRow(row);
        }
    }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DoctorWorkAreaTable = new javax.swing.JTable();
        refreshTestJButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        btnViewAppointments = new javax.swing.JButton();
        btnAddPatientHistory = new javax.swing.JButton();
        btnViewPrescription = new javax.swing.JButton();
        btnCompleted = new javax.swing.JButton();
        btnPrescribeMeds = new javax.swing.JButton();
        btnScheduleSurgery = new javax.swing.JButton();
        btnScheduleLabTest = new javax.swing.JButton();
        scheduleSurgeryJPanel = new javax.swing.JPanel();
        appoinmtntDTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateTxt = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        closebtn = new javax.swing.JButton();
        oprDesc = new javax.swing.JLabel();
        cmbOperationType = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOprDescptn = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DoctorWorkAreaTable.setBackground(new java.awt.Color(255, 193, 131));
        DoctorWorkAreaTable.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        DoctorWorkAreaTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        DoctorWorkAreaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Appointment Date", "Sender", "Appointment Status", "WorkReq Id", "WorkReq Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DoctorWorkAreaTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(DoctorWorkAreaTable);
        if (DoctorWorkAreaTable.getColumnModel().getColumnCount() > 0) {
            DoctorWorkAreaTable.getColumnModel().getColumn(0).setResizable(false);
            DoctorWorkAreaTable.getColumnModel().getColumn(1).setResizable(false);
            DoctorWorkAreaTable.getColumnModel().getColumn(2).setResizable(false);
            DoctorWorkAreaTable.getColumnModel().getColumn(3).setResizable(false);
            DoctorWorkAreaTable.getColumnModel().getColumn(4).setResizable(false);
            DoctorWorkAreaTable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 709, 260));

        refreshTestJButton.setBackground(new java.awt.Color(255, 155, 54));
        refreshTestJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        refreshTestJButton.setText("Refresh");
        refreshTestJButton.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 650, 200, -1));

        enterpriseLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(68, 145, 157));
        enterpriseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enterpriseLabel.setText("Enterprise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 70, 380, 30));

        btnViewAppointments.setBackground(new java.awt.Color(255, 155, 54));
        btnViewAppointments.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnViewAppointments.setText(" View Appointment");
        btnViewAppointments.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        btnViewAppointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAppointmentsActionPerformed(evt);
            }
        });
        add(btnViewAppointments, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 190, -1));

        btnAddPatientHistory.setBackground(new java.awt.Color(255, 155, 54));
        btnAddPatientHistory.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnAddPatientHistory.setText("Add Patient History");
        btnAddPatientHistory.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        btnAddPatientHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientHistoryActionPerformed(evt);
            }
        });
        add(btnAddPatientHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 190, -1));

        btnViewPrescription.setBackground(new java.awt.Color(255, 155, 54));
        btnViewPrescription.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnViewPrescription.setText("View Prescription");
        btnViewPrescription.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        btnViewPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPrescriptionActionPerformed(evt);
            }
        });
        add(btnViewPrescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 530, 200, -1));

        btnCompleted.setBackground(new java.awt.Color(255, 155, 54));
        btnCompleted.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnCompleted.setText("Appointment Completed");
        btnCompleted.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        btnCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompletedActionPerformed(evt);
            }
        });
        add(btnCompleted, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 610, 200, -1));

        btnPrescribeMeds.setBackground(new java.awt.Color(255, 155, 54));
        btnPrescribeMeds.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPrescribeMeds.setText("Prescribe Medicines");
        btnPrescribeMeds.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        btnPrescribeMeds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrescribeMedsActionPerformed(evt);
            }
        });
        add(btnPrescribeMeds, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 490, 200, -1));

        btnScheduleSurgery.setBackground(new java.awt.Color(255, 155, 54));
        btnScheduleSurgery.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnScheduleSurgery.setText("Schedule Surgery");
        btnScheduleSurgery.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        btnScheduleSurgery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleSurgeryActionPerformed(evt);
            }
        });
        add(btnScheduleSurgery, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 570, 200, -1));

        btnScheduleLabTest.setBackground(new java.awt.Color(255, 155, 54));
        btnScheduleLabTest.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnScheduleLabTest.setText("Schedule Test");
        btnScheduleLabTest.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 204, 255)));
        btnScheduleLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleLabTestActionPerformed(evt);
            }
        });
        add(btnScheduleLabTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 450, 190, -1));

        scheduleSurgeryJPanel.setBackground(new java.awt.Color(164, 208, 215));
        scheduleSurgeryJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Add Schedule"));

        appoinmtntDTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        appoinmtntDTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appoinmtntDTxtActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Appointment ID:");

        patientNameTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Patient Name:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Schedule Date:");

        dateTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        saveButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        saveButton.setText("Save/Update");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closebtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        closebtn.setText("Close");
        closebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebtnActionPerformed(evt);
            }
        });

        oprDesc.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        oprDesc.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        oprDesc.setText("Decription:");

        cmbOperationType.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        cmbOperationType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbOperationType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOperationTypeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Operation:");

        txtOprDescptn.setColumns(20);
        txtOprDescptn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtOprDescptn.setRows(5);
        jScrollPane2.setViewportView(txtOprDescptn);

        javax.swing.GroupLayout scheduleSurgeryJPanelLayout = new javax.swing.GroupLayout(scheduleSurgeryJPanel);
        scheduleSurgeryJPanel.setLayout(scheduleSurgeryJPanelLayout);
        scheduleSurgeryJPanelLayout.setHorizontalGroup(
            scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                        .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(oprDesc)
                            .addComponent(jLabel5))
                        .addGap(27, 27, 27)
                        .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbOperationType, 0, 127, Short.MAX_VALUE)
                            .addComponent(appoinmtntDTxt)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(26, 26, 26)
                                .addComponent(patientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(dateTxt)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scheduleSurgeryJPanelLayout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closebtn)
                        .addGap(42, 42, 42))))
        );
        scheduleSurgeryJPanelLayout.setVerticalGroup(
            scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scheduleSurgeryJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appoinmtntDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(patientNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbOperationType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(dateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oprDesc)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(scheduleSurgeryJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveButton)
                    .addComponent(closebtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(scheduleSurgeryJPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 420, -1, -1));
        scheduleSurgeryJPanel.getAccessibleContext().setAccessibleName("Add Surgery");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/doctoMain.JPG"))); // NOI18N
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 190, 188));

        jPanel13.setBackground(new java.awt.Color(68, 145, 157));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 220, -1));

        jPanel14.setBackground(new java.awt.Color(196, 224, 229));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );

        add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 210));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(68, 145, 157));
        jLabel7.setText("Welcome back!");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 370, 37));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();
        
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void btnViewAppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAppointmentsActionPerformed
         int selectedRow = DoctorWorkAreaTable.getSelectedRow();
        if(selectedRow < 0){
            
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        
        }
        Appointment appnt= (Appointment) DoctorWorkAreaTable.getValueAt(selectedRow, 1);
        ViewAppointmentJPanel viewAppointmentJPanel = new ViewAppointmentJPanel(userProcessContainer, userAccount, organization, enterprise, ecosystem, appnt);
        userProcessContainer.add("viewAppointmentJPanel",viewAppointmentJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewAppointmentsActionPerformed

    private void btnAddPatientHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientHistoryActionPerformed
        int selectedRow = DoctorWorkAreaTable.getSelectedRow();
        if(selectedRow >= 0){
            Patient patient = (Patient)DoctorWorkAreaTable.getValueAt(selectedRow,0);
            //            Order order = (Order)OrderJTable.getValueAt(selectedRow, 0);
            PatientHistoryJPanel patientHistoryJPanel = new PatientHistoryJPanel(userProcessContainer, userAccount, organization, enterprise, ecosystem, patient);
            userProcessContainer.add("patientHistoryJPanel",patientHistoryJPanel);
            CardLayout layout=(CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnAddPatientHistoryActionPerformed

    private void btnViewPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPrescriptionActionPerformed
        int selectedrow=DoctorWorkAreaTable.getSelectedRow();
        if(selectedrow<0)
        {
            
            JOptionPane.showMessageDialog(null, "Please select a Patient Appointment");
            return;
       
        }
        if(appointment.getStatus().equals(Appointment.AppointmentStatus.Close.getValue()) || appointment.getStatus().equals(Appointment.AppointmentStatus.Markforbilling.getValue())){
            JOptionPane.showMessageDialog(null, "Request cannot be completed since already processed");
            return;
        }
           appointment = (Appointment) DoctorWorkAreaTable.getValueAt(selectedrow, 1);
           Patient patient = (Patient) DoctorWorkAreaTable.getValueAt(selectedrow, 0);
           //Prescription prescri = (Appointment) DoctorWorkAreaTable.getValueAt(selectedrow, 1);
           ViewPrescriptionJPanel viewPrescriptionJPanel = new ViewPrescriptionJPanel(userProcessContainer, userAccount, organization, enterprise, ecosystem, appointment,patient, doctor);
        userProcessContainer.add("ViewPrescriptionJPanel",viewPrescriptionJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer); 
           //appoinmtntDTxt.setText(String.valueOf(appointment.getAppointmentId()));
           //patientNameTxt.setText(patient.getName());
           //populatePrescription();
    }//GEN-LAST:event_btnViewPrescriptionActionPerformed

//        public void populatePrescription(){
//         DefaultTableModel model = (DefaultTableModel) viewPrescriptionTbl.getModel();
//        model.setRowCount(0);
//        Prescription prelist = appointment.getPrescription();
//        
//        
//        for (Map.Entry<Medicine, Double> entry : appointment.getPrescription().getMedicinePrescribed().entrySet()){
//         Object[] row = new Object[5];
//            row[0] = patient.getName();
//            row[1] = doctor.getName();
//            row[2] = entry.getKey();
//            row[3] = entry.getValue();
//            row[4] = prelist.getPhmacy().getName();
//            model.addRow(row);
//    }
//        }
        
        
        
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(appoinmtntDTxt.getText().equals("") || patientNameTxt.getText().equals("") ||  dateTxt.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Fields cannot be empty");
            return;
        }
        else{
            try {
                int selectedrow=DoctorWorkAreaTable.getSelectedRow();
                if(selectedrow<0){
                    JOptionPane.showMessageDialog(null, "Please select a patient");
                    return;
                }
                Operation operation= new Operation();//(Operation)DoctorWorkAreaTable.getValueAt(selectedrow, 0);
                
                Patient patient = (Patient) DoctorWorkAreaTable.getValueAt(selectedrow, 0);
                Appointment appointment = (Appointment) DoctorWorkAreaTable.getValueAt(selectedrow, 1);
                
                String date1=dateTxt.getText();
                
                boolean check=Validation.validateDate(date1);
                
                if(check == false)
                {
                    JOptionPane.showMessageDialog(null, "Date is not valid");
                    return;
                }
                
                operation.setPatient(patient);
                
                operation.setOperationDate(date1);
                if(txtOprDescptn.getText() != null){
                operation.setOperationDescription(txtOprDescptn.getText());
                }
                else { 
                    operation.setOperationDescription(" ");
                
                }
                
                operation.setOperationCharge(10000.00);
                operation.setDoctor(doctor);
                operation.setStatus(Operation.OperationStatus.WaitingConfirmation.getValue());
                operation.setOprType((String)cmbOperationType.getSelectedItem());
                //set operation
                appointment.setOperation(operation);
                //changed next line status
                appointment.setStatus(Appointment.AppointmentStatus.Markforsurgery.getValue());
                NurseWorkRequest workreq = new NurseWorkRequest();
                workreq.setAppointment(appointment);
                workreq.setMessage("New Patient for Operation, please confirm an operation Date.");
                
                workreq.setSender(userAccount);
                workreq.setPatient(patient);
                
                
                //get today's Date->
                Date date= new Date();
                workreq.setRequestDate(date);
                workreq.setResolveDate(date);
                workreq.setStatus("New");
                UserAccount nurseUserAcc =null;
                //need employee list of the doctor's department -> organization
               // List<UserAccount> userAccDir=  organization.getUserAccountDirectory().getUserAccountList();
                //List<UserAccount> nurseList = enterprise.getUserAccountDirectory().getUserAccountList();
                //for(UserAccount account: userAccDir)
               // {
                //    if(account.getRole().roleValue().equals("Nurse Role"))
                //    {
                        workreq.setReceiver(null);
                        enterprise.getWorkQueue().getWorkRequestList().add(workreq);
              //      }
                    
              //  }
                
              
                
       
                
                
                JOptionPane.showMessageDialog(null, "Schedule added successfully!");
                DB4OUtil.getInstance().storeSystem(ecosystem);
                scheduleSurgeryJPanel.setVisible(false);
                appoinmtntDTxt.setText("");
                patientNameTxt.setText("");
                //bloodGrpTxt.setText("");
                dateTxt.setText("");
                txtOprDescptn.setText("");
                 populateRequestTable();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Date must be entered in YYYY-MM-DD format");
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void closebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebtnActionPerformed
        scheduleSurgeryJPanel.setVisible(false);
    }//GEN-LAST:event_closebtnActionPerformed

    private void btnScheduleSurgeryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleSurgeryActionPerformed
        int selectedrow=DoctorWorkAreaTable.getSelectedRow();
        if(selectedrow<0)
        {
            
            JOptionPane.showMessageDialog(null, "Please select a Patient Appointment");
            return;
       
        }
        DoctorWorkRequest docWr = (DoctorWorkRequest) DoctorWorkAreaTable.getValueAt(selectedrow, 4);
        //check if doc work req is closed - return
        if(docWr.getStatus().equals("New")){
            //JOptionPane.showMessageDialog(null, "Request is already processed");
            docWr.setStatus("In Process");
            //return;
        }
            appointment = (Appointment) DoctorWorkAreaTable.getValueAt(selectedrow, 1);
            patient = (Patient) DoctorWorkAreaTable.getValueAt(selectedrow, 0);
          // scheduleSurgeryJPanel.setVisible(true);        
         //  appoinmtntDTxt.setText(String.valueOf(appointment.getAppointmentId()));
         //  patientNameTxt.setText(patient.getName());
            //populate operation types
         //  populateOperationType();
         
           if(appointment.getStatus().equals(Appointment.AppointmentStatus.Markforbilling.getValue())
                               
                ||
                
                appointment.getStatus().equals(Appointment.AppointmentStatus.Close.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.MarkForInsurance.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.ApprovedInsurance.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.Cancel.getValue())
                )
        {
            JOptionPane.showMessageDialog(null, "Request is already processed");
            return;
        }
         
         
         
         
           CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("ScheduleSurgeryJPanel", new ScheduleSurgeryJPanel(userProcessContainer, patient, appointment, doctor, medicineList, ecosystem, enterprise, userAccount));
        layout.next(userProcessContainer);
        
        
    }//GEN-LAST:event_btnScheduleSurgeryActionPerformed

    
    public void populateOperationType(){
        cmbOperationType.removeAllItems();
        
        for (Operation.OperationType type : Operation.OperationType.values()){
            cmbOperationType.addItem(type.toString());
        }


    }
    
    private void btnPrescribeMedsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrescribeMedsActionPerformed
        
        int selectedRow = DoctorWorkAreaTable.getSelectedRow();
        
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a Patient Appointment");
            return;
        }
        DoctorWorkRequest docWr = (DoctorWorkRequest) DoctorWorkAreaTable.getValueAt(selectedRow, 4);
        //check if doc work req is closed - return
        if(docWr.getStatus().equals("New")){
            //JOptionPane.showMessageDialog(null, "Request is already processed");
            docWr.setStatus("In Process");
            //return;
        }
        patient = (Patient)DoctorWorkAreaTable.getValueAt(selectedRow, 0);
        appointment= (Appointment)DoctorWorkAreaTable.getValueAt(selectedRow, 1);
        
        
          if(appointment.getStatus().equals(Appointment.AppointmentStatus.Markforbilling.getValue())
                               
                ||
                
                appointment.getStatus().equals(Appointment.AppointmentStatus.Close.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.MarkForInsurance.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.ApprovedInsurance.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.Cancel.getValue())
                )
        {
            JOptionPane.showMessageDialog(null, "Request is already processed");
            return;
        }
        
        if(appointment.getStatus().equals(Appointment.AppointmentStatus.Close.getValue()))
        {
            JOptionPane.showMessageDialog(null, "Patient Appointment is closed, cannot proceed");
            return;
        }
        
        
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("PrescriptionJPanel", new PrescriptionJPanel(userProcessContainer, patient, appointment, doctor, medicineList, ecosystem, enterprise, userAccount));
        layout.next(userProcessContainer);
        //populateRequestTable();
        
    }//GEN-LAST:event_btnPrescribeMedsActionPerformed

    private void appoinmtntDTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appoinmtntDTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appoinmtntDTxtActionPerformed

    private void btnScheduleLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleLabTestActionPerformed
        
        int selectedRow = DoctorWorkAreaTable.getSelectedRow();
        
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a Patient Appointment");
            return;
        }
        DoctorWorkRequest docWr = (DoctorWorkRequest) DoctorWorkAreaTable.getValueAt(selectedRow, 4);
        //check if doc work req is closed - return
        if(docWr.getStatus().equals("New")){
            //JOptionPane.showMessageDialog(null, "Request is already processed");
            docWr.setStatus("In Process");
            //return;
        }
        patient = (Patient)DoctorWorkAreaTable.getValueAt(selectedRow, 0);
        appointment= (Appointment)DoctorWorkAreaTable.getValueAt(selectedRow, 1);
        
        if(appointment.getStatus().equals(Appointment.AppointmentStatus.Markforbilling.getValue())
                               
                ||
                
                appointment.getStatus().equals(Appointment.AppointmentStatus.Close.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.MarkForInsurance.getValue())
                ||
                appointment.getStatus().equals(Appointment.AppointmentStatus.ApprovedInsurance.getValue())
                ||
                
                appointment.getStatus().equals(Appointment.AppointmentStatus.Cancel.getValue())
                )
        {
            JOptionPane.showMessageDialog(null, "Request is already processed");
            return;
        }
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("AssignLabTestJPanel", new AssignLabTestJPanel(userProcessContainer, patient, appointment,network, userAccount, organization, ecosystem));
        layout.next(userProcessContainer);
        populateRequestTable();
    }//GEN-LAST:event_btnScheduleLabTestActionPerformed

    private void btnCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompletedActionPerformed
        //appointment.setStatus(Appointment.AppointmentStatus.Markforbilling.getValue());
        
//        appointment= (Appointment)DoctorWorkAreaTable.getValueAt(selectedRow, 1);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        userProcessContainer.add("PrescriptionJPanel", new PrescriptionJPanel(userProcessContainer, patient, appointment, doctor, medicineList, ecosystem));
//        layout.next(userProcessContainer);
        //fetch selected row...
        //0th patient 1th appoint
        //        appointment.setStaus("Mark for billing");
                
               int selectedRow = DoctorWorkAreaTable.getSelectedRow(); 
               if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a Patient Appointment");
            return;
        }
               patient = (Patient)DoctorWorkAreaTable.getValueAt(selectedRow, 0);
        appointment= (Appointment)DoctorWorkAreaTable.getValueAt(selectedRow, 1);
        receptionist = (UserAccount)DoctorWorkAreaTable.getValueAt(selectedRow, 2);
        DoctorWorkRequest docWr = (DoctorWorkRequest) DoctorWorkAreaTable.getValueAt(selectedRow, 4);
        //check if doc work req is closed - return
        if(docWr.getStatus().equals("Close")){
            JOptionPane.showMessageDialog(null, "Request is already processed");
            return;
        }
        
        docWr.setStatus("Close");
        
               ReceptionistWorkRequest workreq = new ReceptionistWorkRequest();
                workreq.setStatus("New");
                appointment.setStatus(Appointment.AppointmentStatus.Markforbilling.getValue());
                workreq.setMessage("Prepare Bill for this Patient");
                workreq.setSender(userAccount);
                workreq.setPatient(patient);
                workreq.setDoctor(doctor);
                workreq.setReceiver(receptionist);
                //Appointment appointment = (Appointment) 
                receptionist.getWorkQueue().getWorkRequestList().add(workreq);
                //UserAccount recepUseracc = null;
                //List<UserAccount> userAccDir=  organization.getUserAccountDirectory().getUserAccountList();
                //List<UserAccount> nurseList = enterprise.getUserAccountDirectory().getUserAccountList();
                //workreq.setReceiver(receptionist.getUserAccountDirectory().getUserAccountList().get(0));
                JOptionPane.showMessageDialog(null, "Appointment status changed to Mark for Billing & Doctor Request completed");
                populateRequestTable();
                //JOptionPane.showMessageDialog(null, "Doctor Work status changed to Mark for Billing");
                
    }//GEN-LAST:event_btnCompletedActionPerformed

    private void cmbOperationTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOperationTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOperationTypeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DoctorWorkAreaTable;
    private javax.swing.JTextField appoinmtntDTxt;
    private javax.swing.JButton btnAddPatientHistory;
    private javax.swing.JButton btnCompleted;
    private javax.swing.JButton btnPrescribeMeds;
    private javax.swing.JButton btnScheduleLabTest;
    private javax.swing.JButton btnScheduleSurgery;
    private javax.swing.JButton btnViewAppointments;
    private javax.swing.JButton btnViewPrescription;
    private javax.swing.JButton closebtn;
    private javax.swing.JComboBox<String> cmbOperationType;
    private javax.swing.JTextField dateTxt;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel oprDesc;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel scheduleSurgeryJPanel;
    private javax.swing.JTextArea txtOprDescptn;
    // End of variables declaration//GEN-END:variables
}
